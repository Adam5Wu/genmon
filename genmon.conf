[GenMon]

# name of the site, used in the web interface and email output (required)
sitename = SiteName

# the serial device name of your serial port. Normally  /dev/serial0 or
# /dev/ttyAMA0 for onboard Raspberry Pi Serial ports (required)
port = /dev/serial0

# the name of the folder in the mailbox for searching for incoming email
# commands (required)
incoming_mail_folder = Generator

# once an email command has been processed by genmon.py the email is moved to
# this mailbox folder (required)
processed_mail_folder = Generator/Processed

# The TCP port used for communicating with the other apps like ClientInterface.py
# and the web interface (required)
server_port = 9082

# the Modbus slave address. This *should* not need to be changed from 9d (required)
address = 9d

# True if monitoring a liquid cooled generator, False if air cooled. This option
# is for monitoring active relays in the controller, which are different for
# liquid vs air cooled generators (required)
liquidcooled = True

# location of log files (required)
loglocation = /var/log/

# location of the text file containing descriptions of alarm codes (required)
# the default location is in the same directory as genmon.py
alarmfile = /home/pi/genmon/ALARMS.txt

# enable genmon.py to output to the console if True. If this is false the other
# display* commands below are ignored (optional, default False)
displayoutput = False

# display information about genmon.py to the console (optional, default False)
displaymonitor = False

# display controller register contents to the console (optional, default False)
displayregisters = False

# display generator status to the console (optional, default False)
displaystatus = False

# display maintenance information to the console (optional, default False)
displaymaintenance = False

# enable enable code to support reverse engineering of registers. This option,
# when True creates a thread that will monitor registers in the controller and
# send notifications of changed registers. Not used in normal operation (optional,
# default False)
enabledebug = False

# This option will display the contents of additional registers that appear to be
# associated with sensors of some type, for example one register outputs almost
# half of the frequency. I assume this is used internally by the controller.
# (optional, default False)
displayunknown = False

# (optional) This option enables (when True) using and alternate method for writing
# the exercise time. Some version of the Evolution firmware only support the legacy
# method of writing the exercise time. The legacy method is a bit more convoluted
# and the current implementation may result in the exercise time being off by one
# or two minutes from the request set value. (optional, default False).  Note
# this option is forced True if a Nexus controller is detected or selected.
# (e.g. use legacy exercise write if using a Nexus controller). When using this
# method the exercise time must be at least three minutes or more from the current
# generator time.
#uselegacysetexercise = False

# (optional). The software will auto-detect the controller type. The auto-detect
# can be overridden with this setting. True for Evolution controller, False for
# Nexus Controller.
#evolutioncontroller = True

# (optional) default True. This parameter is only valid for liquid cooled
# Evolution generators, ignored for others. True if your generator uses diesel
# or gasoline, false if you use  propane or natural gas. This value is used
# to change how some register values are interpreted and displayed based on
# the fuel type
#petroleumfuel = True


